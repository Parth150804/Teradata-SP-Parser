version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'antlr'

sourceCompatibility = '1.8'
application {
    mainClass = "us.shadowlabs.tdparser.Main"
}

repositories {
    mavenCentral()
}


jar {
    manifest {
        attributes "Main-Class": "us.shadowlabs.tdparser.Main"
    }
}

task fatJar(type: Jar) {
    archiveBaseName.set(project.name + '-all')
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

    manifest {
        attributes "Main-Class": "us.shadowlabs.tdparser.Main"
    }
}

dependencies {
    // Use implementation instead of deprecated compile
    implementation (group: 'org.antlr', name: 'antlr4', version: '4.7') {
        // Exclude ST4 dependency
        exclude group: 'org.antlr', module: 'ST4'
    }
    
    antlr 'org.antlr:antlr4:4.7'
    implementation 'org.antlr:antlr4-runtime:4.7'  

    implementation "javax.annotation:javax.annotation-api:1.3.2"
    testImplementation 'junit:junit:4.13.2'
    implementation 'org.apache.logging.log4j:log4j-core:+'
    implementation 'commons-cli:commons-cli:1.3.1'
    implementation 'com.h2database:h2:1.4.197'
    implementation fileTree(dir: 'lib', include: ['*.jar'])
    
    // Use testImplementation instead of deprecated testCompile
    testImplementation 'junit:junit:4.12'
}

File generatedSourceDir = file('src/generated/main/java')

def srcDir = fileTree('src/main/antlr').include('**/*.g4')

generateGrammarSource {
    source = srcDir
    outputDirectory = generatedSourceDir
    arguments += ["-visitor", "-long-messages", "-package", "us.shadowlabs.tdparser.antlr"]
}

clean.doFirst {
    println "deleting ${generatedSourceDir.absolutePath}"
    delete "${generatedSourceDir.absolutePath}"
}

idea {
    module {
        generatedSourceDirs += generatedSourceDir
    }
}

sourceSets {
    main {
        java {
            srcDirs += [generatedSourceDir]
        }
    }
}

run {
    args = ['-i', './test_sql/tdsql.sql', '-o', 'output.txt']
}
